--------------------------------------------------------------------------------
Profile data file 'Performance/callgrind.512.out' (creator: callgrind-3.22.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 675389484
Trigger: Program termination
Profiled target:  ./pearson data/512.data output/output_512.txt (PID 43618, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
7,351,097,554 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
2,487,597,056 (33.84%)  /home/zxn1225/Desktop/performance_opti/pearson/analysis.cpp:Analysis::pearson(Vector const&, Vector const&) [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
2,150,091,776 (29.25%)  /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::mean() const [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
1,741,422,592 (23.69%)  /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::operator[](unsigned int) const [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
  155,504,606 ( 2.12%)  ./stdio-common/./stdio-common/printf_fp.c:__printf_fp_buffer_1.isra.0 [/usr/lib/x86_64-linux-gnu/libc.so.6]
  111,879,413 ( 1.52%)  ./stdlib/./stdlib/strtod_l.c:____strtod_l_internal [/usr/lib/x86_64-linux-gnu/libc.so.6]
   86,768,852 ( 1.18%)  ???:std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::_M_extract_float(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, std::string&) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   56,821,168 ( 0.77%)  ./stdlib/../sysdeps/x86_64/mul_1.S:__mpn_mul_1 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   27,523,584 ( 0.37%)  ???:std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > >::do_get(std::istreambuf_iterator<char, std::char_traits<char> >, std::istreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, std::_Ios_Iostate&, double&) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   25,509,120 ( 0.35%)  ./stdio-common/./stdio-common/vfprintf-internal.c:__printf_buffer [/usr/lib/x86_64-linux-gnu/libc.so.6]
   21,161,897 ( 0.29%)  ./stdlib/./stdlib/strtod_l.c:str_to_mpn.isra.0 [/usr/lib/x86_64-linux-gnu/libc.so.6]
   19,229,952 ( 0.26%)  ???:std::ostreambuf_iterator<char, std::char_traits<char> > std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > >::_M_insert_float<double>(std::ostreambuf_iterator<char, std::char_traits<char> >, std::ios_base&, char, char, double) const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   18,868,860 ( 0.26%)  ???:0x0000000000147b90 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   18,868,824 ( 0.26%)  ???:std::string::push_back(char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   16,523,380 ( 0.22%)  ???:std::istream::sentry::sentry(std::istream&, bool) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   16,211,976 ( 0.22%)  ./stdlib/./stdlib/mul.c:__mpn_mul [/usr/lib/x86_64-linux-gnu/libc.so.6]
   15,753,705 ( 0.21%)  /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::Vector(Vector const&) [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
   14,267,344 ( 0.19%)  ./malloc/./malloc/malloc.c:_int_free [/usr/lib/x86_64-linux-gnu/libc.so.6]
   13,634,560 ( 0.19%)  ???:std::istream& std::istream::_M_extract<double>(double&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
   12,719,183 ( 0.17%)  ./stdlib/./stdlib/strtod_l.c:round_and_return [/usr/lib/x86_64-linux-gnu/libc.so.6]
   11,905,567 ( 0.16%)  ./malloc/./malloc/malloc.c:malloc [/usr/lib/x86_64-linux-gnu/libc.so.6]
   10,475,616 ( 0.14%)  ./stdlib/../sysdeps/x86_64/lshift.S:__mpn_lshift [/usr/lib/x86_64-linux-gnu/libc.so.6]
    9,958,565 ( 0.14%)  ???:0x00000000001164e0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    9,957,580 ( 0.14%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_chk_avx_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
    9,549,568 ( 0.13%)  ./stdio-common/./stdio-common/Xprintf_buffer_write.c:__printf_buffer_write [/usr/lib/x86_64-linux-gnu/libc.so.6]
    9,437,184 ( 0.13%)  ???:void std::__convert_to_v<double>(char const*, double&, std::_Ios_Iostate&, __locale_struct* const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    8,645,142 ( 0.12%)  ???:0x0000000000142070 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    8,633,931 ( 0.12%)  ???:std::ostream::sentry::sentry(std::ostream&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    8,388,608 ( 0.11%)  ???:std::string::reserve(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    7,864,320 ( 0.11%)  /usr/include/c++/13/bits/stream_iterator.h:std::istream_iterator<double, char, std::char_traits<char>, long>::_M_read() [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
    7,587,340 ( 0.10%)  ???:std::ostream& std::ostream::_M_insert<double>(double) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    7,456,512 ( 0.10%)  ./stdio-common/./stdio-common/printf_fp.c:__printf_fp_l_buffer [/usr/lib/x86_64-linux-gnu/libc.so.6]
    7,412,732 ( 0.10%)  ./malloc/./malloc/malloc.c:free [/usr/lib/x86_64-linux-gnu/libc.so.6]
    7,064,064 ( 0.10%)  ???:0x000000000010d1d0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    6,933,301 ( 0.09%)  ???:std::basic_filebuf<char, std::char_traits<char> >::overflow(int) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    6,815,744 ( 0.09%)  ???:std::string::_Rep::_M_clone(std::allocator<char> const&, unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    6,727,472 ( 0.09%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms [/usr/lib/x86_64-linux-gnu/libc.so.6]
    6,291,456 ( 0.09%)  ???:std::string::_Rep::_S_create(unsigned long, unsigned long, std::allocator<char> const&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    5,894,610 ( 0.08%)  ???:std::locale::facet::_S_get_c_locale() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    5,755,948 ( 0.08%)  ./locale/./locale/uselocale.c:uselocale [/usr/lib/x86_64-linux-gnu/libc.so.6]
    5,502,434 ( 0.07%)  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S:__strlen_avx2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    5,494,290 ( 0.07%)  ???:std::basic_streambuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    5,363,589 ( 0.07%)  ???:std::ostream::flush() [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    5,363,456 ( 0.07%)  ???:std::ostream::put(char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    5,101,828 ( 0.07%)  ???:std::basic_filebuf<char, std::char_traits<char> >::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    4,971,008 ( 0.07%)  ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S:__strchrnul_avx2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    4,971,008 ( 0.07%)  ???:std::basic_filebuf<char, std::char_traits<char> >::_M_convert_to_external(char*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    4,452,980 ( 0.06%)  ./stdio-common/./stdio-common/printf_fp.c:hack_digit [/usr/lib/x86_64-linux-gnu/libc.so.6]
    4,329,229 ( 0.06%)  /home/zxn1225/Desktop/performance_opti/pearson/analysis.cpp:Analysis::correlation_coefficients(std::vector<Vector, std::allocator<Vector> >) [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
    4,235,792 ( 0.06%)  ???:operator new(unsigned long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    4,199,936 ( 0.06%)  /usr/include/c++/13/bits/stl_algobase.h:double* std::__copy_n_a<std::istream_iterator<double, char, std::char_traits<char>, long>, unsigned int, double*>(std::istream_iterator<double, char, std::char_traits<char>, long>, unsigned int, double*, bool) [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
    4,192,432 ( 0.06%)  ./stdlib/../sysdeps/ieee754/dbl-64/mpn2dbl.c:__mpn_construct_double [/usr/lib/x86_64-linux-gnu/libc.so.6]
    4,186,159 ( 0.06%)  /home/zxn1225/Desktop/performance_opti/pearson/dataset.cpp:Dataset::write(std::vector<double, std::allocator<double> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
    3,924,480 ( 0.05%)  ./libio/./libio/vsnprintf.c:vsnprintf [/usr/lib/x86_64-linux-gnu/libc.so.6]
    3,924,480 ( 0.05%)  ???:std::__num_base::_S_format_float(std::ios_base const&, char*, char) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    3,924,408 ( 0.05%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::push_back(double const&) [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
    3,532,032 ( 0.05%)  ???:std::__basic_file<char>::xsputn(char const*, long) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    3,407,885 ( 0.05%)  ???:0x000000000013eae0 [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    3,171,342 ( 0.04%)  ???:std::locale::id::_M_id() const [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    3,139,584 ( 0.04%)  /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::operator[](unsigned long) [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
    2,877,952 ( 0.04%)  ./stdlib/../sysdeps/ieee754/dbl-64/dbl2mpn.c:__mpn_extract_double [/usr/lib/x86_64-linux-gnu/libc.so.6]
    2,877,952 ( 0.04%)  /usr/include/c++/13/bits/stream_iterator.h:std::istream_iterator<double, char, std::char_traits<char>, long>::operator++() [/home/zxn1225/Desktop/performance_opti/pearson_op1/pearson]
    2,747,136 ( 0.04%)  ???:std::basic_ostream<char, std::char_traits<char> >& std::endl<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&) [/usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.33]
    2,732,350 ( 0.04%)  ./stdlib/../sysdeps/x86_64/rshift.S:__mpn_rshift [/usr/lib/x86_64-linux-gnu/libc.so.6]
    2,678,747 ( 0.04%)  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S:__memchr_avx2 [/usr/lib/x86_64-linux-gnu/libc.so.6]
    2,620,270 ( 0.04%)  ./stdlib/../sysdeps/generic/get-rounding-mode.h:round_and_return
    2,485,504 ( 0.03%)  ./stdio-common/./stdio-common/Xprintf_buffer_done.c:__printf_buffer_done [/usr/lib/x86_64-linux-gnu/libc.so.6]

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_vector.h
--------------------------------------------------------------------------------
Ir                 

-- line 91 ----------------------------------------
        .           
        .                 struct _Vector_impl_data
        .                 {
        .           	pointer _M_start;
        .           	pointer _M_finish;
        .           	pointer _M_end_of_storage;
        .           
        .           	_GLIBCXX20_CONSTEXPR
       16 ( 0.00%)  	_Vector_impl_data() _GLIBCXX_NOEXCEPT
       24 ( 0.00%)  	: _M_start(), _M_finish(), _M_end_of_storage()
       12 ( 0.00%)  	{ }
        .           
        .           #if __cplusplus >= 201103L
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Vector_impl_data(_Vector_impl_data&& __x) noexcept
        .           	: _M_start(__x._M_start), _M_finish(__x._M_finish),
        .           	  _M_end_of_storage(__x._M_end_of_storage)
        .           	{ __x._M_start = __x._M_finish = __x._M_end_of_storage = pointer(); }
        .           #endif
-- line 109 ----------------------------------------
-- line 125 ----------------------------------------
        .           	  // information used by TBAA.
        .           	  _Vector_impl_data __tmp;
        .           	  __tmp._M_copy_data(*this);
        .           	  _M_copy_data(__x);
        .           	  __x._M_copy_data(__tmp);
        .           	}
        .                 };
        .           
       40 ( 0.00%)        struct _Vector_impl
        .           	: public _Tp_alloc_type, public _Vector_impl_data
        .                 {
        .           	_GLIBCXX20_CONSTEXPR
       18 ( 0.00%)  	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
        .           	    is_nothrow_default_constructible<_Tp_alloc_type>::value)
        .           #if __cpp_lib_concepts
        .           	requires is_default_constructible_v<_Tp_alloc_type>
        .           #endif
        6 ( 0.00%)  	: _Tp_alloc_type()
       13 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_Vector_impl_data::_Vector_impl_data() (1x)
        6 ( 0.00%)  	{ }
        .           
        .           	_GLIBCXX20_CONSTEXPR
       28 ( 0.00%)  	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
        6 ( 0.00%)  	: _Tp_alloc_type(__a)
       13 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_Vector_impl_data::_Vector_impl_data() (1x)
        6 ( 0.00%)  	{ }
        .           
        .           #if __cplusplus >= 201103L
        .           	// Not defaulted, to enforce noexcept(true) even when
        .           	// !is_nothrow_move_constructible<_Tp_alloc_type>.
        .           	_GLIBCXX20_CONSTEXPR
        .           	_Vector_impl(_Vector_impl&& __x) noexcept
        .           	: _Tp_alloc_type(std::move(__x)), _Vector_impl_data(std::move(__x))
        .           	{ }
-- line 156 ----------------------------------------
-- line 293 ----------------------------------------
        .           #endif // _GLIBCXX_SANITIZE_STD_ALLOCATOR && _GLIBCXX_SANITIZE_VECTOR
        .                 };
        .           
        .               public:
        .                 typedef _Alloc allocator_type;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Tp_alloc_type&
      288 ( 0.00%)        _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
      216 ( 0.00%)        { return this->_M_impl; }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 const _Tp_alloc_type&
      232 ( 0.00%)        _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
      174 ( 0.00%)        { return this->_M_impl; }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 allocator_type
        .                 get_allocator() const _GLIBCXX_NOEXCEPT
        .                 { return allocator_type(_M_get_Tp_allocator()); }
        .           
        .           #if __cplusplus >= 201103L
       22 ( 0.00%)        _Vector_base() = default;
       30 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_Vector_impl::_Vector_impl() (1x)
        .           #else
        .                 _Vector_base() { }
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
        .                 : _M_impl(__a) { }
        .           
-- line 323 ----------------------------------------
-- line 325 ----------------------------------------
        .           #if !_GLIBCXX_INLINE_VERSION
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Vector_base(size_t __n)
        .                 : _M_impl()
        .                 { _M_create_storage(__n); }
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
       16 ( 0.00%)        _Vector_base(size_t __n, const allocator_type& __a)
       10 ( 0.00%)        : _M_impl(__a)
       35 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_Vector_impl::_Vector_impl(std::allocator<Vector> const&) (1x)
       18 ( 0.00%)        { _M_create_storage(__n); }
      522 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_M_create_storage(unsigned long) (1x)
        .           
        .           #if __cplusplus >= 201103L
        .                 _Vector_base(_Vector_base&&) = default;
        .           
        .                 // Kept for ABI compatibility.
        .           # if !_GLIBCXX_INLINE_VERSION
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Vector_base(_Tp_alloc_type&& __a) noexcept
-- line 343 ----------------------------------------
-- line 359 ----------------------------------------
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 _Vector_base(const allocator_type& __a, _Vector_base&& __x)
        .                 : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
        .                 { }
        .           #endif
        .           
        .                 _GLIBCXX20_CONSTEXPR
       20 ( 0.00%)        ~_Vector_base() _GLIBCXX_NOEXCEPT
        .                 {
       28 ( 0.00%)  	_M_deallocate(_M_impl._M_start,
      244 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<double, std::allocator<double> >::_M_deallocate(double*, unsigned long) (2x)
       28 ( 0.00%)  		      _M_impl._M_end_of_storage - _M_impl._M_start);
       24 ( 0.00%)        }
       42 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<double, std::allocator<double> >::_Vector_impl::~_Vector_impl() (2x)
        .           
        .               public:
        .                 _Vector_impl _M_impl;
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 pointer
      180 ( 0.00%)        _M_allocate(size_t __n)
        .                 {
        .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
      180 ( 0.00%)  	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
       60 ( 0.00%)        }
        .           
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
      224 ( 0.00%)        _M_deallocate(pointer __p, size_t __n)
        .                 {
        .           	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
       64 ( 0.00%)  	if (__p)
      180 ( 0.00%)  	  _Tr::deallocate(_M_impl, __p, __n);
       96 ( 0.00%)        }
        .           
        .               protected:
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
       12 ( 0.00%)        _M_create_storage(size_t __n)
        .                 {
       14 ( 0.00%)  	this->_M_impl._M_start = this->_M_allocate(__n);
      495 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_M_allocate(unsigned long) (1x)
        8 ( 0.00%)  	this->_M_impl._M_finish = this->_M_impl._M_start;
       14 ( 0.00%)  	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
        6 ( 0.00%)        }
        .               };
        .           
        .             /**
        .              *  @brief A standard container which offers fixed time access to
        .              *  individual elements in any order.
        .              *
        .              *  @ingroup sequences
        .              *  @headerfile vector
-- line 409 ----------------------------------------
-- line 496 ----------------------------------------
        .                 }
        .           
        .                 static pointer
        .                 _S_do_relocate(pointer, pointer, pointer __result,
        .           		     _Tp_alloc_type&, false_type) noexcept
        .                 { return __result; }
        .           
        .                 static _GLIBCXX20_CONSTEXPR pointer
      288 ( 0.00%)        _S_relocate(pointer __first, pointer __last, pointer __result,
        .           		  _Tp_alloc_type& __alloc) noexcept
        .                 {
        .           #if __cpp_if_constexpr
        .           	// All callers have already checked _S_use_relocate() so just do it.
      216 ( 0.00%)  	return std::__relocate_a(__first, __last, __result, __alloc);
1,036,652 ( 0.01%)  => /usr/include/c++/13/bits/stl_uninitialized.h:double* std::__relocate_a<double*, double*, std::allocator<double> >(double*, double*, double*, std::allocator<double>&) (36x)
        .           #else
        .           	using __do_it = __bool_constant<_S_use_relocate()>;
        .           	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
        .           #endif
       72 ( 0.00%)        }
        .           #endif // C++11
        .           
        .               protected:
        .                 using _Base::_M_allocate;
        .                 using _Base::_M_deallocate;
        .                 using _Base::_M_impl;
        .                 using _Base::_M_get_Tp_allocator;
        .           
-- line 522 ----------------------------------------
-- line 523 ----------------------------------------
        .               public:
        .                 // [23.2.4.1] construct/copy/destroy
        .                 // (assign() and get_allocator() are also listed in this section)
        .           
        .                 /**
        .                  *  @brief  Creates a %vector with no elements.
        .                  */
        .           #if __cplusplus >= 201103L
       22 ( 0.00%)        vector() = default;
       41 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_Vector_base() (1x)
        .           #else
        .                 vector() { }
        .           #endif
        .           
        .                 /**
        .                  *  @brief  Creates a %vector with no elements.
        .                  *  @param  __a  An allocator object.
        .                  */
-- line 539 ----------------------------------------
-- line 593 ----------------------------------------
        .                  *  All the elements of @a __x are copied, but any unused capacity in
        .                  *  @a __x  will not be copied
        .                  *  (i.e. capacity() == size() in the new %vector).
        .                  *
        .                  *  The newly-created %vector uses a copy of the allocator object used
        .                  *  by @a __x (unless the allocator traits dictate a different object).
        .                  */
        .                 _GLIBCXX20_CONSTEXPR
       24 ( 0.00%)        vector(const vector& __x)
        .                 : _Base(__x.size(),
       48 ( 0.00%)  	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
      579 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_Vector_base(unsigned long, std::allocator<Vector> const&) (1x)
       13 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::size() const (1x)
        7 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_M_get_Tp_allocator() const (1x)
        .                 {
        4 ( 0.00%)  	this->_M_impl._M_finish =
       28 ( 0.00%)  	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
5,435,248 ( 0.07%)  => /usr/include/c++/13/bits/stl_uninitialized.h:Vector* std::__uninitialized_copy_a<__gnu_cxx::__normal_iterator<Vector const*, std::vector<Vector, std::allocator<Vector> > >, Vector*, Vector>(__gnu_cxx::__normal_iterator<Vector const*, std::vector<Vector, std::allocator<Vector> > >, __gnu_cxx::__normal_iterator<Vector const*, std::vector<Vector, std::allocator<Vector> > >, Vector*, std::allocator<Vector>&) (1x)
       32 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::end() const (1x)
       31 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::begin() const (1x)
        .           				      this->_M_impl._M_start,
        8 ( 0.00%)  				      _M_get_Tp_allocator());
        7 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_M_get_Tp_allocator() (1x)
       20 ( 0.00%)        }
        .           
        .           #if __cplusplus >= 201103L
        .                 /**
        .                  *  @brief  %Vector move constructor.
        .                  *
        .                  *  The newly-created %vector contains the exact contents of the
        .                  *  moved instance.
        .                  *  The contents of the moved instance are a valid, but unspecified
-- line 617 ----------------------------------------
-- line 725 ----------------------------------------
        .           
        .                 /**
        .                  *  The dtor only erases the elements, and note that if the
        .                  *  elements themselves are pointers, the pointed-to memory is
        .                  *  not touched in any way.  Managing the pointer is the user's
        .                  *  responsibility.
        .                  */
        .                 _GLIBCXX20_CONSTEXPR
       20 ( 0.00%)        ~vector() _GLIBCXX_NOEXCEPT
        .                 {
       28 ( 0.00%)  	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
       12 ( 0.00%)  		      _M_get_Tp_allocator());
       14 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::_M_get_Tp_allocator() (2x)
        .           	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
       24 ( 0.00%)        }
      730 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<Vector, std::allocator<Vector> >::~_Vector_base() (2x)
        .           
        .                 /**
        .                  *  @brief  %Vector assignment operator.
        .                  *  @param  __x  A %vector of identical element and allocator types.
        .                  *
        .                  *  All the elements of @a __x are copied, but any unused capacity in
        .                  *  @a __x will not be copied.
        .                  *
-- line 746 ----------------------------------------
-- line 865 ----------------------------------------
        .                 // iterators
        .                 /**
        .                  *  Returns a read/write iterator that points to the first
        .                  *  element in the %vector.  Iteration is done in ordinary
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 iterator
      224 ( 0.00%)        begin() _GLIBCXX_NOEXCEPT
      308 ( 0.00%)        { return iterator(this->_M_impl._M_start); }
      120 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Vector*, std::vector<Vector, std::allocator<Vector> > >::__normal_iterator(Vector* const&) (10x)
        .           
        .                 /**
        .                  *  Returns a read-only (constant) iterator that points to the
        .                  *  first element in the %vector.  Iteration is done in ordinary
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 const_iterator
       16 ( 0.00%)        begin() const _GLIBCXX_NOEXCEPT
       22 ( 0.00%)        { return const_iterator(this->_M_impl._M_start); }
       12 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Vector const*, std::vector<Vector, std::allocator<Vector> > >::__normal_iterator(Vector const* const&) (1x)
        .           
        .                 /**
        .                  *  Returns a read/write iterator that points one past the last
        .                  *  element in the %vector.  Iteration is done in ordinary
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 iterator
      224 ( 0.00%)        end() _GLIBCXX_NOEXCEPT
      336 ( 0.00%)        { return iterator(this->_M_impl._M_finish); }
      216 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >::__normal_iterator(double* const&) (18x)
        .           
        .                 /**
        .                  *  Returns a read-only (constant) iterator that points one past
        .                  *  the last element in the %vector.  Iteration is done in
        .                  *  ordinary element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 const_iterator
       16 ( 0.00%)        end() const _GLIBCXX_NOEXCEPT
       24 ( 0.00%)        { return const_iterator(this->_M_impl._M_finish); }
       12 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:__gnu_cxx::__normal_iterator<Vector const*, std::vector<Vector, std::allocator<Vector> > >::__normal_iterator(Vector const* const&) (1x)
        .           
        .                 /**
        .                  *  Returns a read/write reverse iterator that points to the
        .                  *  last element in the %vector.  Iteration is done in reverse
        .                  *  element order.
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 reverse_iterator
-- line 912 ----------------------------------------
-- line 984 ----------------------------------------
        .                 crend() const noexcept
        .                 { return const_reverse_iterator(begin()); }
        .           #endif
        .           
        .                 // [23.2.4.2] capacity
        .                 /**  Returns the number of elements in the %vector.  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 size_type
1,051,080 ( 0.01%)        size() const _GLIBCXX_NOEXCEPT
2,364,930 ( 0.03%)        { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
        .           
        .                 /**  Returns the size() of the largest possible %vector.  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 size_type
      280 ( 0.00%)        max_size() const _GLIBCXX_NOEXCEPT
      392 ( 0.00%)        { return _S_max_size(_M_get_Tp_allocator()); }
    1,620 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::_S_max_size(std::allocator<double> const&) (36x)
      252 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::_Vector_base<double, std::allocator<double> >::_M_get_Tp_allocator() const (36x)
        .           
        .           #if __cplusplus >= 201103L
        .                 /**
        .                  *  @brief  Resizes the %vector to the specified number of elements.
        .                  *  @param  __new_size  Number of elements the %vector should contain.
        .                  *
        .                  *  This function will %resize the %vector to the specified
        .                  *  number of elements.  If the number is smaller than the
-- line 1007 ----------------------------------------
-- line 1118 ----------------------------------------
        .                  *
        .                  *  This operator allows for easy, array-style, data access.
        .                  *  Note that data access with this operator is unchecked and
        .                  *  out_of_range lookups are not defined. (For checked lookups
        .                  *  see at().)
        .                  */
        .                 _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
        .                 reference
1,962,240 ( 0.03%)        operator[](size_type __n) _GLIBCXX_NOEXCEPT
        .                 {
        .           	__glibcxx_requires_subscript(__n);
1,962,240 ( 0.03%)  	return *(this->_M_impl._M_start + __n);
  784,896 ( 0.01%)        }
        .           
        .                 /**
        .                  *  @brief  Subscript access to the data contained in the %vector.
        .                  *  @param __n The index of the element for which data should be
        .                  *  accessed.
        .                  *  @return  Read-only (constant) reference to data.
        .                  *
        .                  *  This operator allows for easy, array-style, data access.
-- line 1138 ----------------------------------------
-- line 1273 ----------------------------------------
        .                  *  This is a typical stack operation.  The function creates an
        .                  *  element at the end of the %vector and assigns the given data
        .                  *  to it.  Due to the nature of a %vector this operation can be
        .                  *  done in constant time if the %vector has preallocated space
        .                  *  available.
        .                  */
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
  920,832 ( 0.01%)        push_back(const value_type& __x)
        .                 {
  787,968 ( 0.01%)  	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
        .           	  {
        .           	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
  919,100 ( 0.01%)  	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
        .           				     __x);
  656,500 ( 0.01%)  	    ++this->_M_impl._M_finish;
        .           	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
        .           	  }
        .           	else
      252 ( 0.00%)  	  _M_realloc_insert(end(), __x);
1,054,541 ( 0.01%)  => /usr/include/c++/13/bits/vector.tcc:void std::vector<double, std::allocator<double> >::_M_realloc_insert<double const&>(__gnu_cxx::__normal_iterator<double*, std::vector<double, std::allocator<double> > >, double const&) (18x)
      576 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::end() (18x)
  658,660 ( 0.01%)        }
        .           
        .           #if __cplusplus >= 201103L
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
        .                 push_back(value_type&& __x)
        .                 { emplace_back(std::move(__x)); }
        .           
        .                 template<typename... _Args>
-- line 1301 ----------------------------------------
-- line 1888 ----------------------------------------
        .                 iterator
        .                 _M_emplace_aux(const_iterator __position, value_type&& __v)
        .                 { return _M_insert_rval(__position, std::move(__v)); }
        .           #endif
        .           
        .                 // Called by _M_fill_insert, _M_insert_aux etc.
        .                 _GLIBCXX20_CONSTEXPR
        .                 size_type
      308 ( 0.00%)        _M_check_len(size_type __n, const char* __s) const
        .                 {
      392 ( 0.00%)  	if (max_size() - size() < __n)
    1,152 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::max_size() const (18x)
      234 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::size() const (18x)
        .           	  __throw_length_error(__N(__s));
        .           
      448 ( 0.00%)  	const size_type __len = size() + (std::max)(size(), __n);
      468 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::size() const (36x)
      253 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:unsigned long const& std::max<unsigned long>(unsigned long const&, unsigned long const&) (18x)
      308 ( 0.00%)  	return (__len < size() || __len > max_size()) ? max_size() : __len;
    1,152 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::max_size() const (18x)
      234 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::size() const (18x)
      168 ( 0.00%)        }
        .           
        .                 // Called by constructors to check initial size.
        .                 static _GLIBCXX20_CONSTEXPR size_type
        .                 _S_check_init_len(size_type __n, const allocator_type& __a)
        .                 {
        .           	if (__n > _S_max_size(_Tp_alloc_type(__a)))
        .           	  __throw_length_error(
        .           	      __N("cannot create std::vector larger than max_size()"));
        .           	return __n;
        .                 }
        .           
        .                 static _GLIBCXX20_CONSTEXPR size_type
      448 ( 0.00%)        _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
        .                 {
        .           	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
        .           	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
        .           	// (even if std::allocator_traits::max_size says we can).
      448 ( 0.00%)  	const size_t __diffmax
        .           	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
       56 ( 0.00%)  	const size_t __allocmax = _Alloc_traits::max_size(__a);
      336 ( 0.00%)  	return (std::min)(__diffmax, __allocmax);
      280 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:unsigned long const& std::min<unsigned long>(unsigned long const&, unsigned long const&) (20x)
      280 ( 0.00%)        }
        .           
        .                 // Internal erase functions follow.
        .           
        .                 // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
        .                 // _M_assign_aux.
        .                 _GLIBCXX20_CONSTEXPR
        .                 void
        .                 _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
-- line 1933 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stl_algobase.h
--------------------------------------------------------------------------------
Ir                 

-- line 225 ----------------------------------------
        .              *
        .              *  This is the simple classic generic implementation.  It will work on
        .              *  temporary expressions, since they are only evaluated once, unlike a
        .              *  preprocessor macro.
        .             */
        .             template<typename _Tp>
        .               _GLIBCXX14_CONSTEXPR
        .               inline const _Tp&
  654,360 ( 0.01%)      min(const _Tp& __a, const _Tp& __b)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
        .                 //return __b < __a ? __b : __a;
  785,232 ( 0.01%)        if (__b < __a)
        .           	return __b;
  130,872 ( 0.00%)        return __a;
  261,744 ( 0.00%)      }
        .           
        .             /**
        .              *  @brief This does what you think it does.
        .              *  @ingroup sorting_algorithms
        .              *  @param  __a  A thing of arbitrary type.
        .              *  @param  __b  Another thing of arbitrary type.
        .              *  @return   The greater of the parameters.
        .              *
        .              *  This is the simple classic generic implementation.  It will work on
        .              *  temporary expressions, since they are only evaluated once, unlike a
        .              *  preprocessor macro.
        .             */
        .             template<typename _Tp>
        .               _GLIBCXX14_CONSTEXPR
        .               inline const _Tp&
  654,220 ( 0.01%)      max(const _Tp& __a, const _Tp& __b)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
        .                 //return  __a < __b ? __b : __a;
  785,064 ( 0.01%)        if (__a < __b)
        4 ( 0.00%)  	return __b;
  130,842 ( 0.00%)        return __a;
  261,688 ( 0.00%)      }
        .           
        .             /**
        .              *  @brief This does what you think it does.
        .              *  @ingroup sorting_algorithms
        .              *  @param  __a  A thing of arbitrary type.
        .              *  @param  __b  Another thing of arbitrary type.
        .              *  @param  __comp  A @link comparison_functors comparison functor@endlink.
        .              *  @return   The lesser of the parameters.
-- line 273 ----------------------------------------
-- line 308 ----------------------------------------
        .                 return __a;
        .               }
        .           
        .             // Fallback implementation of the function in bits/stl_iterator.h used to
        .             // remove the __normal_iterator wrapper. See copy, fill, ...
        .             template<typename _Iterator>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _Iterator
    2,484 ( 0.00%)      __niter_base(_Iterator __it)
        .               _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    1,863 ( 0.00%)      { return __it; }
        .           
        .             template<typename _Ite, typename _Seq>
        .               _Ite
        .               __niter_base(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq,
        .           		 std::random_access_iterator_tag>&);
        .           
        .             // Reverse the __niter_base transformation to get a
        .             // __normal_iterator back again (this assumes that __normal_iterator
-- line 326 ----------------------------------------
-- line 330 ----------------------------------------
        .               inline _From
        .               __niter_wrap(_From __from, _To __res)
        .               { return __from + (__res - std::__niter_base(__from)); }
        .           
        .             // No need to wrap, iterator already has the right type.
        .             template<typename _Iterator>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _Iterator
    2,565 ( 0.00%)      __niter_wrap(const _Iterator&, _Iterator __res)
    1,539 ( 0.00%)      { return __res; }
        .           
        .             // All of these auxiliary structs serve two purposes.  (1) Replace
        .             // calls to copy with memmove whenever possible.  (Memmove, not memcpy,
        .             // because the input and output ranges are permitted to overlap.)
        .             // (2) If we're using random access iterators, then write the loop as
        .             // a for loop with an explicit count.
        .           
        .             template<bool _IsMove, bool _IsSimple, typename _Category>
-- line 347 ----------------------------------------
-- line 425 ----------------------------------------
        .           #endif
        .           
        .             template<bool _IsMove>
        .               struct __copy_move<_IsMove, true, random_access_iterator_tag>
        .               {
        .                 template<typename _Tp, typename _Up>
        .           	_GLIBCXX20_CONSTEXPR
        .           	static _Up*
        7 ( 0.00%)  	__copy_m(_Tp* __first, _Tp* __last, _Up* __result)
        .           	{
        4 ( 0.00%)  	  const ptrdiff_t _Num = __last - __first;
        5 ( 0.00%)  	  if (__builtin_expect(_Num > 1, true))
        8 ( 0.00%)  	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
1,046,514 ( 0.01%)  => ???:0x000000000010a5b0 (1x)
        .           	  else if (_Num == 1)
        .           	    std::__copy_move<_IsMove, false, random_access_iterator_tag>::
        .           	      __assign_one(__result, __first);
        4 ( 0.00%)  	  return __result + _Num;
        2 ( 0.00%)  	}
        .               };
        .           
        .           _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
        .           
        .             template<typename _Tp, typename _Ref, typename _Ptr>
        .               struct _Deque_iterator;
        .           
        .             struct _Bit_iterator;
-- line 450 ----------------------------------------
-- line 489 ----------------------------------------
        .           	istreambuf_iterator<_CharT, char_traits<_CharT> >,
        .           	istreambuf_iterator<_CharT, char_traits<_CharT> >,
        .           	_GLIBCXX_STD_C::_Deque_iterator<_CharT, _CharT&, _CharT*>);
        .           #endif // HOSTED
        .           
        .             template<bool _IsMove, typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
        7 ( 0.00%)      __copy_move_a2(_II __first, _II __last, _OI __result)
        .               {
        .                 typedef typename iterator_traits<_II>::iterator_category _Category;
        .           #ifdef __cpp_lib_is_constant_evaluated
        .                 if (std::is_constant_evaluated())
        .           	return std::__copy_move<_IsMove, false, _Category>::
        .           	  __copy_m(__first, __last, __result);
        .           #endif
        .                 return std::__copy_move<_IsMove, __memcpyable<_OI, _II>::__value,
        6 ( 0.00%)  			      _Category>::__copy_m(__first, __last, __result);
1,046,544 ( 0.01%)  => /usr/include/c++/13/bits/stl_algobase.h:double* std::__copy_move<false, true, std::random_access_iterator_tag>::__copy_m<double const, double>(double const*, double const*, double*) (1x)
        2 ( 0.00%)      }
        .           
        .             template<bool _IsMove,
        .           	   typename _Tp, typename _Ref, typename _Ptr, typename _OI>
        .               _OI
        .               __copy_move_a1(_GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
        .           		   _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Ref, _Ptr>,
        .           		   _OI);
        .           
-- line 515 ----------------------------------------
-- line 524 ----------------------------------------
        .               typename __gnu_cxx::__enable_if<
        .                 __is_random_access_iter<_II>::__value,
        .                 _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*> >::__type
        .               __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);
        .           
        .             template<bool _IsMove, typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
        7 ( 0.00%)      __copy_move_a1(_II __first, _II __last, _OI __result)
        8 ( 0.00%)      { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
1,046,559 ( 0.01%)  => /usr/include/c++/13/bits/stl_algobase.h:double* std::__copy_move_a2<false, double const*, double*>(double const*, double const*, double*) (1x)
        .           
        .             template<bool _IsMove, typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
        9 ( 0.00%)      __copy_move_a(_II __first, _II __last, _OI __result)
        .               {
       20 ( 0.00%)        return std::__niter_wrap(__result,
1,046,574 ( 0.01%)  => /usr/include/c++/13/bits/stl_algobase.h:double* std::__copy_move_a1<false, double const*, double*>(double const*, double const*, double*) (1x)
       36 ( 0.00%)  => /usr/include/c++/13/bits/stl_iterator.h:double const* std::__niter_base<double const*, std::vector<double, std::allocator<double> > >(__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >) (2x)
        8 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:double* std::__niter_wrap<double*>(double* const&, double*) (1x)
        7 ( 0.00%)  => /usr/include/c++/13/bits/stl_algobase.h:double* std::__niter_base<double*>(double*) (1x)
        .           		std::__copy_move_a1<_IsMove>(std::__niter_base(__first),
        .           					     std::__niter_base(__last),
        .           					     std::__niter_base(__result)));
        5 ( 0.00%)      }
        .           
        .             template<bool _IsMove,
        .           	   typename _Ite, typename _Seq, typename _Cat, typename _OI>
        .               _OI
        .               __copy_move_a(const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           		  const ::__gnu_debug::_Safe_iterator<_Ite, _Seq, _Cat>&,
        .           		  _OI);
        .           
-- line 552 ----------------------------------------
-- line 562 ----------------------------------------
        .               ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>
        .               __copy_move_a(const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
        .           		  const ::__gnu_debug::_Safe_iterator<_IIte, _ISeq, _ICat>&,
        .           		  const ::__gnu_debug::_Safe_iterator<_OIte, _OSeq, _OCat>&);
        .           
        .             template<typename _InputIterator, typename _Size, typename _OutputIterator>
        .               _GLIBCXX20_CONSTEXPR
        .               _OutputIterator
    4,608 ( 0.00%)      __copy_n_a(_InputIterator __first, _Size __n, _OutputIterator __result,
        .           	       bool)
        .               {
    1,024 ( 0.00%)        if (__n > 0)
        .           	{
        .           	  while (true)
        .           	    {
1,834,496 ( 0.02%)  	      *__result = *__first;
2,097,152 ( 0.03%)  => /usr/include/c++/13/bits/stream_iterator.h:std::istream_iterator<double, char, std::char_traits<char>, long>::operator*() const (262,144x)
  262,144 ( 0.00%)  	      ++__result;
1,310,720 ( 0.02%)  	      if (--__n > 0)
  784,896 ( 0.01%)  		++__first;
499,345,861 ( 6.79%)  => /usr/include/c++/13/bits/stream_iterator.h:std::istream_iterator<double, char, std::char_traits<char>, long>::operator++() (261,632x)
        .           	      else
      512 ( 0.00%)  		break;
        .           	    }
        .           	}
      512 ( 0.00%)        return __result;
    1,024 ( 0.00%)      }
        .           
        .           #if _GLIBCXX_HOSTED
        .             template<typename _CharT, typename _Size>
        .               typename __gnu_cxx::__enable_if<
        .                 __is_char<_CharT>::__value, _CharT*>::__type
        .               __copy_n_a(istreambuf_iterator<_CharT, char_traits<_CharT> >,
        .           	       _Size, _CharT*, bool);
        .           
-- line 594 ----------------------------------------
-- line 616 ----------------------------------------
        .              *  [first,last); the copy_backward function should be used instead.
        .              *
        .              *  Note that the end of the output range is permitted to be contained
        .              *  within [first,last).
        .             */
        .             template<typename _II, typename _OI>
        .               _GLIBCXX20_CONSTEXPR
        .               inline _OI
        8 ( 0.00%)      copy(_II __first, _II __last, _OI __result)
        .               {
        .                 // concept requirements
        .                 __glibcxx_function_requires(_InputIteratorConcept<_II>)
        .                 __glibcxx_function_requires(_OutputIteratorConcept<_OI,
        .           	    typename iterator_traits<_II>::reference>)
        .                 __glibcxx_requires_can_increment_range(__first, __last, __result);
        .           
        .                 return std::__copy_move_a<__is_move_iterator<_II>::__value>
       13 ( 0.00%)  	     (std::__miter_base(__first), std::__miter_base(__last), __result);
1,046,659 ( 0.01%)  => /usr/include/c++/13/bits/stl_algobase.h:double* std::__copy_move_a<false, __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >, double*>(__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >, __gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >, double*) (1x)
       14 ( 0.00%)  => /usr/include/c++/13/bits/cpp_type_traits.h:__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > std::__miter_base<__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > > >(__gnu_cxx::__normal_iterator<double const*, std::vector<double, std::allocator<double> > >) (2x)
        3 ( 0.00%)      }
        .           
        .           #if __cplusplus >= 201103L
        .             /**
        .              *  @brief Moves the range [first,last) into result.
        .              *  @ingroup mutating_algorithms
        .              *  @param  __first  An input iterator.
        .              *  @param  __last   An input iterator.
        .              *  @param  __result An output iterator.
-- line 642 ----------------------------------------
-- line 1006 ----------------------------------------
        .           
        .                 std::__fill_a(__first, __last, __value);
        .               }
        .           
        .             // Used by fill_n, generate_n, etc. to convert _Size to an integral type:
        .             inline _GLIBCXX_CONSTEXPR int
        .             __size_to_integer(int __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned
    3,584 ( 0.00%)    __size_to_integer(unsigned __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR long
        .             __size_to_integer(long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned long
        .             __size_to_integer(unsigned long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR long long
        .             __size_to_integer(long long __n) { return __n; }
        .             inline _GLIBCXX_CONSTEXPR unsigned long long
        .             __size_to_integer(unsigned long long __n) { return __n; }
-- line 1022 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/13/bits/stream_iterator.h
--------------------------------------------------------------------------------
Ir                 

-- line 71 ----------------------------------------
        .           
        .               public:
        .                 ///  Construct end of input stream iterator.
        .                 _GLIBCXX_CONSTEXPR istream_iterator()
        .                 _GLIBCXX_NOEXCEPT_IF(is_nothrow_default_constructible<_Tp>::value)
        .                 : _M_stream(0), _M_value(), _M_ok(false) {}
        .           
        .                 ///  Construct start of input stream iterator.
    3,072 ( 0.00%)        istream_iterator(istream_type& __s)
    3,584 ( 0.00%)        : _M_stream(std::__addressof(__s)), _M_ok(true)
    3,584 ( 0.00%)  => /usr/include/c++/13/bits/move.h:std::istream* std::__addressof<std::istream>(std::istream&) (512x)
    3,072 ( 0.00%)        { _M_read(); }
  974,836 ( 0.01%)  => /usr/include/c++/13/bits/stream_iterator.h:std::istream_iterator<double, char, std::char_traits<char>, long>::_M_read() (512x)
        .           
        .                 _GLIBCXX_CONSTEXPR
    5,120 ( 0.00%)        istream_iterator(const istream_iterator& __obj)
        .                 _GLIBCXX_NOEXCEPT_IF(is_nothrow_copy_constructible<_Tp>::value)
    8,192 ( 0.00%)        : _M_stream(__obj._M_stream), _M_value(__obj._M_value),
    4,096 ( 0.00%)          _M_ok(__obj._M_ok)
    3,072 ( 0.00%)        { }
        .           
        .           #if __cplusplus > 201703L && __cpp_lib_concepts
        .                 constexpr
        .                 istream_iterator(default_sentinel_t)
        .                 noexcept(is_nothrow_default_constructible_v<_Tp>)
        .                 : istream_iterator() { }
        .           #endif
        .           
        .           #if __cplusplus >= 201103L
        .                 istream_iterator& operator=(const istream_iterator&) = default;
        .                 ~istream_iterator() = default;
        .           #endif
        .           
        .                 _GLIBCXX_NODISCARD
        .                 const _Tp&
1,048,576 ( 0.01%)        operator*() const _GLIBCXX_NOEXCEPT
        .                 {
        .           	__glibcxx_requires_cond(_M_ok,
        .           				_M_message(__gnu_debug::__msg_deref_istream)
        .           				._M_iterator(*this));
  524,288 ( 0.01%)  	return _M_value;
  524,288 ( 0.01%)        }
        .           
        .                 _GLIBCXX_NODISCARD
        .                 const _Tp*
        .                 operator->() const _GLIBCXX_NOEXCEPT
        .                 { return std::__addressof((operator*())); }
        .           
        .                 istream_iterator&
1,308,160 ( 0.02%)        operator++()
        .                 {
        .           	__glibcxx_requires_cond(_M_ok,
        .           				_M_message(__gnu_debug::__msg_inc_istream)
        .           				._M_iterator(*this));
  784,896 ( 0.01%)  	_M_read();
496,467,909 ( 6.75%)  => /usr/include/c++/13/bits/stream_iterator.h:std::istream_iterator<double, char, std::char_traits<char>, long>::_M_read() (261,632x)
  261,632 ( 0.00%)  	return *this;
  523,264 ( 0.01%)        }
        .           
        .                 istream_iterator
        .                 operator++(int)
        .                 {
        .           	__glibcxx_requires_cond(_M_ok,
        .           				_M_message(__gnu_debug::__msg_inc_istream)
        .           				._M_iterator(*this));
        .           	istream_iterator __tmp = *this;
-- line 133 ----------------------------------------
-- line 140 ----------------------------------------
        .                 _M_equal(const istream_iterator& __x) const _GLIBCXX_NOEXCEPT
        .                 {
        .           	// Ideally this would just return _M_stream == __x._M_stream,
        .           	// but code compiled with old versions never sets _M_stream to null.
        .           	return (_M_ok == __x._M_ok) && (!_M_ok || _M_stream == __x._M_stream);
        .                 }
        .           
        .                 void
1,310,720 ( 0.02%)        _M_read()
        .                 {
5,767,168 ( 0.08%)          if (_M_stream && !(*_M_stream >> _M_value))
488,005,561 ( 6.64%)  => ???:0x000000000010a440 (262,144x)
1,572,864 ( 0.02%)  => ???:0x000000000010a3a0 (262,144x)
        .                     {
        .                       _M_stream = 0;
        .                       _M_ok = false;
        .                     }
  786,432 ( 0.01%)        }
        .           
        .                 /// Return true if the iterators refer to the same stream,
        .                 /// or are both at end-of-stream.
        .                 _GLIBCXX_NODISCARD
        .                 friend bool
        .                 operator==(const istream_iterator& __x, const istream_iterator& __y)
        .                 _GLIBCXX_NOEXCEPT
        .                 { return __x._M_equal(__y); }
-- line 163 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/zxn1225/Desktop/performance_opti/pearson/dataset.cpp
--------------------------------------------------------------------------------
Ir                 

-- line 10 ----------------------------------------
        .           #include <iterator>
        .           #include <algorithm>
        .           #include <iomanip>
        .           #include <limits>
        .           
        .           namespace Dataset
        .           {
        .               std::vector<Vector> read(std::string filename)
       11 ( 0.00%)      {
        1 ( 0.00%)          unsigned dimension{};
        7 ( 0.00%)          std::vector<Vector> result{};
       52 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::vector() (1x)
        3 ( 0.00%)          std::ifstream f{};
    2,339 ( 0.00%)  => ???:0x000000000010a500 (1x)
        .           
        6 ( 0.00%)          f.open(filename);
    7,043 ( 0.00%)  => ???:0x000000000010a460 (1x)
        .           
        6 ( 0.00%)          if (!f)
        6 ( 0.00%)  => ???:0x000000000010a3a0 (1x)
        .                   {
        .                       std::cerr << "Failed to read dataset(s) from file " << filename << std::endl;
        .                       return result;
        .                   }
        .           
        5 ( 0.00%)          f >> dimension;
    6,520 ( 0.00%)  => ???:0x000000000010a340 (1x)
        3 ( 0.00%)          std::string line{};
        8 ( 0.00%)  => ???:0x000000000010a550 (1x)
        .           
        5 ( 0.00%)          std::getline(f, line); // ignore first newline
    3,771 ( 0.00%)  => ???:0x000000000010a350 (1x)
        .           
    6,670 ( 0.00%)          while (std::getline(f, line))
  509,140 ( 0.01%)  => ???:0x000000000010a350 (513x)
    3,078 ( 0.00%)  => ???:0x000000000010a530 (513x)
        .                   {
    4,608 ( 0.00%)              std::stringstream ss{line};
  850,259 ( 0.01%)  => ???:0x000000000010a5a0 (512x)
    4,608 ( 0.00%)  => /usr/include/c++/13/bits/ios_base.h:std::operator|(std::_Ios_Openmode, std::_Ios_Openmode) (512x)
    2,560 ( 0.00%)              Vector new_vec{dimension};
  161,859 ( 0.00%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::Vector(unsigned int) (512x)
    7,680 ( 0.00%)              std::copy_n(std::istream_iterator<double>{ss},
505,712,069 ( 6.88%)  => /usr/include/c++/13/bits/stl_algo.h:double* std::copy_n<std::istream_iterator<double, char, std::char_traits<char>, long>, unsigned int, double*>(std::istream_iterator<double, char, std::char_traits<char>, long>, unsigned int, double*) (512x)
  988,148 ( 0.01%)  => /usr/include/c++/13/bits/stream_iterator.h:std::istream_iterator<double, char, std::char_traits<char>, long>::istream_iterator(std::istream&) (512x)
    4,096 ( 0.00%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::get_data() (512x)
        .                                   dimension,
        .                                   new_vec.get_data());
    2,560 ( 0.00%)              result.push_back(new_vec);
11,063,668 ( 0.15%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::push_back(Vector const&) (512x)
    3,072 ( 0.00%)          }
  174,584 ( 0.00%)  => ???:0x000000000010a400 (512x)
  114,310 ( 0.00%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::~Vector() (512x)
        .           
        1 ( 0.00%)          return result;
       15 ( 0.00%)      }
    6,149 ( 0.00%)  => ???:0x000000000010a360 (1x)
      210 ( 0.00%)  => ???:0x000000000010a3d0 (1x)
        .           
        .               void write(std::vector<double> data, std::string filename)
       10 ( 0.00%)      {
        3 ( 0.00%)          std::ofstream f{};
      609 ( 0.00%)  => ???:0x000000000010a5d0 (1x)
        .           
        6 ( 0.00%)          f.open(filename);
      842 ( 0.00%)  => ???:0x000000000010a3b0 (1x)
        .           
        6 ( 0.00%)          if (!f)
        6 ( 0.00%)  => ???:0x000000000010a3a0 (1x)
        .                   {
        .                       std::cerr << "Failed to write data to file " << filename << std::endl;
        .                       return;
        .                   }
        .           
1,308,171 ( 0.02%)          for (auto i{0}; i < data.size(); i++)
1,700,621 ( 0.02%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::size() const (130,817x)
        .                   {
2,877,952 ( 0.04%)              f << std::setprecision(std::numeric_limits<double>::digits10 + 1) << data[i] << std::endl;
366,182,790 ( 4.98%)  => ???:0x000000000010a600 (130,816x)
42,257,487 ( 0.57%)  => ???:0x000000000010a4b0 (130,816x)
1,569,792 ( 0.02%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::operator[](unsigned long) (130,816x)
1,177,344 ( 0.02%)  => ???:0x000000000010a590 (130,816x)
  915,712 ( 0.01%)  => /usr/include/c++/13/iomanip:std::setprecision(int) (130,816x)
        .                   }
       11 ( 0.00%)      }
      902 ( 0.00%)  => ???:0x000000000010a580 (1x)
        .           
        .           };

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp
--------------------------------------------------------------------------------
Ir                     

-- line 7 ----------------------------------------
            .           #include <cmath>
            .           #include <vector>
            .           
            .           Vector::Vector()
            .               : size{0}, data{nullptr}
            .           {
            .           }
            .           
       10,235 ( 0.00%)  Vector::~Vector()
            .           {
        8,188 ( 0.00%)      if (data)
            .               {
       16,376 ( 0.00%)          delete[] data;
      441,608 ( 0.01%)  => ???:0x000000000010a540 (2,047x)
            .               }
            .           
        4,094 ( 0.00%)      size = 0;
        6,141 ( 0.00%)  }
            .           
       12,282 ( 0.00%)  Vector::Vector(unsigned size)
       28,658 ( 0.00%)      : size{size}, data{new double[size]}
      571,909 ( 0.01%)  => ???:0x000000000010a330 (2,047x)
            .           {
        6,141 ( 0.00%)  }
            .           
            .           Vector::Vector(unsigned size, double *data)
            .               : size{size}, data{data}
            .           {
            .           }
            .           
        9,210 ( 0.00%)  Vector::Vector(const Vector &other)
        9,210 ( 0.00%)      : Vector{other.size}
      457,131 ( 0.01%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::Vector(unsigned int) (1,535x)
            .           {
    4,726,265 ( 0.06%)      for (auto i{0}; i < size; i++)
            .               {
   11,002,880 ( 0.15%)          data[i] = other.data[i];
            .               }
        6,140 ( 0.00%)  }
            .           
            .           unsigned Vector::get_size() const
      523,264 ( 0.01%)  {
      261,632 ( 0.00%)      return size;
      261,632 ( 0.00%)  }
            .           
            .           double *Vector::get_data()
        2,048 ( 0.00%)  {
        1,024 ( 0.00%)      return data;
        1,024 ( 0.00%)  }
            .           
            .           double Vector::operator[](unsigned i) const
  669,777,920 ( 9.11%)  {
  803,733,504 (10.93%)      return data[i];
  267,911,168 ( 3.64%)  }
            .           
            .           double &Vector::operator[](unsigned i)
            .           {
            .               return data[i];
            .           }
            .           
            .           double Vector::mean() const
    1,046,528 ( 0.01%)  {
      523,264 ( 0.01%)      double sum{0};
            .           
  805,564,928 (10.96%)      for (auto i{0}; i < size; i++)
            .               {
1,339,555,840 (18.22%)          sum += data[i];
            .               }
            .           
    2,877,952 ( 0.04%)      return sum / static_cast<double>(size);
      523,264 ( 0.01%)  }
            .           
            .           double Vector::magnitude() const
            .           {
            .               auto dot_prod{dot(*this)};
            .               return std::sqrt(dot_prod);
            .           }
            .           
            .           Vector Vector::operator/(double div)
-- line 82 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/zxn1225/Desktop/performance_opti/pearson/analysis.cpp
--------------------------------------------------------------------------------
Ir                   

-- line 7 ----------------------------------------
          .           #include <cmath>
          .           #include <iostream>
          .           #include <list>
          .           #include <vector>
          .           
          .           namespace Analysis {
          .           
          .           std::vector<double> correlation_coefficients(std::vector<Vector> datasets)
         10 ( 0.00%)  {
          7 ( 0.00%)      std::vector<double> result {};
         52 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::vector() (1x)
          .           
      5,633 ( 0.00%)      for (auto sample1 { 0 }; sample1 < datasets.size() - 1; sample1++) {
      6,656 ( 0.00%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::size() const (512x)
  1,314,803 ( 0.02%)          for (auto sample2 { sample1 + 1 }; sample2 < datasets.size(); sample2++) {
  1,707,251 ( 0.02%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::size() const (131,327x)
  2,354,688 ( 0.03%)              auto corr { pearson(datasets[sample1], datasets[sample2]) };
6,385,128,960 (86.86%)  => /home/zxn1225/Desktop/performance_opti/pearson/analysis.cpp:Analysis::pearson(Vector const&, Vector const&) (130,816x)
  3,139,584 ( 0.04%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<Vector, std::allocator<Vector> >::operator[](unsigned long) (261,632x)
    654,080 ( 0.01%)              result.push_back(corr);
 10,473,041 ( 0.14%)  => /usr/include/c++/13/bits/stl_vector.h:std::vector<double, std::allocator<double> >::push_back(double const&) (130,816x)
          .                   }
          .               }
          .           
          1 ( 0.00%)      return result;
          7 ( 0.00%)  }
          .           
          .           double pearson(Vector vec1, Vector vec2)
  1,177,344 ( 0.02%)  {
    654,080 ( 0.01%)      auto x_mean { vec1.mean() };
1,075,045,888 (14.62%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::mean() const (130,816x)
    654,080 ( 0.01%)      auto y_mean { vec2.mean() };
1,075,045,888 (14.62%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::mean() const (130,816x)
          .           
    523,264 ( 0.01%)      auto x_mm { vec1 - x_mean };
  1,046,528 ( 0.01%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::get_size() const (130,816x)
    261,632 ( 0.00%)      auto y_mm { vec2 - y_mean };
          .           
    261,632 ( 0.00%)      auto x_mag { x_mm.magnitude() };
    261,632 ( 0.00%)      auto y_mag { y_mm.magnitude() };
    261,632 ( 0.00%)  
          .               auto x_mm_over_x_mag { x_mm / x_mag };
268,565,248 ( 3.65%)      auto y_mm_over_y_mag { y_mm / y_mag };
602,800,128 ( 8.20%)  
870,711,296 (11.84%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::operator[](unsigned int) const (66,977,792x)
602,800,128 ( 8.20%)      auto r { x_mm_over_x_mag.dot(y_mm_over_y_mag) };
870,711,296 (11.84%)  => /home/zxn1225/Desktop/performance_opti/pearson/vector.cpp:Vector::operator[](unsigned int) const (66,977,792x)
          .           
334,888,960 ( 4.56%)      return std::max(std::min(r, 1.0), -1.0);
          .           }
334,888,960 ( 4.56%)  };
334,888,960 ( 4.56%)  <bogus line 47>
    915,712 ( 0.01%)  <bogus line 50>
    784,896 ( 0.01%)  <bogus line 52>
    392,448 ( 0.01%)  <bogus line 56>
  1,962,240 ( 0.03%)  <bogus line 58>
    654,080 ( 0.01%)  <bogus line 59>

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@ WARNING @@ WARNING @@ WARNING @@ WARNING @@ WARNING @@ WARNING @@ WARNING @@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@
@@ Information recorded about lines past the end of '/home/zxn1225/Desktop/performance_opti/pearson/analysis.cpp'.
@@
@@ Probable cause and solution:
@@ cause:    not sure, sorry
@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./libio/./libio/vsnprintf.c
  ./locale/./locale/uselocale.c
  ./malloc/./malloc/malloc.c
  ./stdio-common/./stdio-common/Xprintf_buffer_done.c
  ./stdio-common/./stdio-common/Xprintf_buffer_write.c
  ./stdio-common/./stdio-common/printf_fp.c
  ./stdio-common/./stdio-common/vfprintf-internal.c
  ./stdlib/../sysdeps/generic/get-rounding-mode.h
  ./stdlib/../sysdeps/ieee754/dbl-64/dbl2mpn.c
  ./stdlib/../sysdeps/ieee754/dbl-64/mpn2dbl.c
  ./stdlib/../sysdeps/x86_64/lshift.S
  ./stdlib/../sysdeps/x86_64/mul_1.S
  ./stdlib/../sysdeps/x86_64/rshift.S
  ./stdlib/./stdlib/mul.c
  ./stdlib/./stdlib/strtod_l.c
  ./string/../sysdeps/x86_64/multiarch/memchr-avx2.S
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S
  ./string/../sysdeps/x86_64/multiarch/strchr-avx2.S
  ./string/../sysdeps/x86_64/multiarch/strlen-avx2.S

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
6,097,774,702 (82.95%)  events annotated

